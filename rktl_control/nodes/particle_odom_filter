#!/usr/bin/env python3
"""
Node to estimate odometry from poses over time using a Particle filter.

License:
  BSD 3-Clause License
  Copyright (c) 2023, Autonomous Robotics Club of Purdue (Purdue ARC)
  All rights reserved.
"""

# ROS
import rospy
from nav_msgs.msg import Odometry
from geometry_msgs.msg import PoseWithCovarianceStamped, PoseArray, Pose
from rktl_msgs.msg import ControlEffort
from tf.transformations import euler_from_quaternion, quaternion_from_euler

import numpy as np
from pfilter import ParticleFilter
from collections import deque
from threading import Lock
from math import sin, cos, tan, atan, sqrt, pi, exp


class ParticleOdomFilter(object):
    """Class to estimate pose and velocity using Particle filter."""

    def __init__(self):
        rospy.init_node('particle_odom_filter')

        # physical constants (global)
        self.FIELD_WIDTH = rospy.get_param('/field/width')
        self.FIELD_HEIGHT = rospy.get_param('/field/length')
        self.CAR_LENGTH = rospy.get_param('/cars/length')
        self.MAX_SPEED = rospy.get_param('/cars/throttle/max_speed')
        self.THROTTLE_TAU = rospy.get_param('/cars/throttle/tau')
        self.STEERING_THROW = rospy.get_param('/cars/steering/max_throw')
        self.STEERING_RATE = rospy.get_param('/cars/steering/rate')

        # node configuration
        self.MAP_FRAME = rospy.get_param('~frame_ids/map', 'map')
        self.BODY_FRAME = rospy.get_param('~frame_ids/body', 'base_link')
        self.DELTA_T = rospy.Duration(1.0/rospy.get_param('~rate', 10.0))
        self.SUPERSAMPLING = rospy.get_param('~supersampling', 1)
        self.PUB_PARTICLES = rospy.get_param('~publish_particles', False)
        self.WATCHDOG_DELTA_T = self.DELTA_T * \
            rospy.get_param('~allowable_latency', 1.2)
        self.OPEN_LOOP_LIMIT = rospy.get_param('~open_loop_limit', 10)

        # should the filter compensate for delay by trying to predict the future?
        self.PREDICT_ENABLE = rospy.get_param('~delay/compensate', False)
        self.PREDICT_TIME = rospy.Duration(
            rospy.get_param('~delay/duration', 0.0))

        # should the filter weigh particles based on a boundary check?
        boundary_check = rospy.get_param('~boundary_check', False)

        # filter tuning options
        num_particles = rospy.get_param('~num_particles', 1000)
        resample_proportion = rospy.get_param('~resample_proportion', 0.1)

        # standard deviation of incoming measurements used to assign particle weights
        self.MEAS_LOC_STD_DEV = rospy.get_param(
            '~measurement_error/location', 0.05)
        self.MEAS_DIR_STD_DEV = rospy.get_param(
            '~measurement_error/orientation', np.deg2rad(5))

        # standard deviation when generating random states based off current guess
        self.GEN_LOC_STD_DEV = rospy.get_param(
            '~generator_noise/location', 0.05)
        self.GEN_DIR_STD_DEV = rospy.get_param(
            '~generator_noise/orientation', 0.05)
        self.GEN_VEL_STD_DEV = rospy.get_param(
            '~generator_noise/velocity', 0.05)
        self.GEN_PSI_STD_DEV = rospy.get_param(
            '~generator_noise/steering_angle', np.deg2rad(1))

        # should the filter use historic effort data to get a more accurate idea of where the car is?
        use_efforts = rospy.get_param('~efforts/enable', False)
        effort_buffer_size = rospy.get_param('~efforts/buffer_size', 0)

        # standard deviation to add noise to effort when effort is known and enabled
        self.THR_EFFORT_STD_DEV = rospy.get_param(
            '~efforts/throttle/noise', 0.05)
        self.STR_EFFORT_STD_DEV = rospy.get_param(
            '~efforts/steering/noise', 0.05)

        # max and min for uniform effort distribution when effort is not known or disabled
        self.MAX_THROTTLE = rospy.get_param('~efforts/throttle/max',  1.0)
        self.MIN_THROTTLE = rospy.get_param('~efforts/throttle/min', -1.0)
        self.MAX_STEERING = rospy.get_param('~efforts/steering/max',  1.0)
        self.MIN_STEERING = rospy.get_param('~efforts/steering/min', -1.0)

        # variables
        self.effort_buffer = deque(maxlen=effort_buffer_size)
        self.current_time = None
        self.target_time = None
        self.watchdog = None
        self.open_loop_count = 0
        self.lock = Lock()

        self.rng = np.random.default_rng()
        self.filter = ParticleFilter(
            prior_fn=self.particle_init,
            dynamics_fn=self.particle_dynamics_wrapper,
            observe_fn=self.particle_observation,
            weight_fn=self.particle_weight,
            internal_weight_fn=self.particle_boundary_check
            if boundary_check else None, n_particles=num_particles,
            resample_proportion=resample_proportion)
        self.filter.mean_state = None

        # pubs / subs
        self.odom_pub = rospy.Publisher('odom', Odometry, queue_size=1)
        node.create_subscription(PoseWithCovarianceStamped, 'pose_sync', self.pose_cb)
        if use_efforts:
            node.create_subscription(ControlEffort, 'effort', self.effort_cb)
        if self.PUB_PARTICLES:
            self.cloud_pub = rospy.Publisher(
                'odom_particles', PoseArray, queue_size=1)

        # main loop
        rospy.spin()

    def effort_cb(self, effort_msg):
        """Callback for new efforts."""
        self.effort_buffer.append(effort_msg)

    def watchdog_cb(self, timer_event):
        """Callback for the watchdog timer for dropped pose messages."""
        with self.lock:
            # confirm there was no late attempt to reset
            if self.watchdog is None:
                return

            assert self.current_time is not None
            rospy.loginfo(
                "Dropped pose message detected, extrapolating with no measurement")

            # set a new watchdog
            self.watchdog = rospy.Timer(
                self.WATCHDOG_DELTA_T, self.watchdog_cb, True)

            # get the exact time since the watchdog was set
            set_time = timer_event.current_expected - self.WATCHDOG_DELTA_T
            delta_t = timer_event.current_real - set_time

            # publish an estimate
            if self.open_loop_count < self.OPEN_LOOP_LIMIT:
                self.target_time = self.current_time + delta_t
                self.filter.update()
                self.publish_odom()
                self.open_loop_count += 1
            else:
                rospy.logerr("Halting filter due to too many lost poses")
                self.filter_reset()

    def pose_cb(self, pose_msg):
        """Callback for new poses."""
        assert (pose_msg.header.frame_id == self.MAP_FRAME)

        # get observation from message
        x = pose_msg.pose.pose.position.x
        y = pose_msg.pose.pose.position.y
        __, __, yaw = euler_from_quaternion([
            pose_msg.pose.pose.orientation.x,
            pose_msg.pose.pose.orientation.y,
            pose_msg.pose.pose.orientation.z,
            pose_msg.pose.pose.orientation.w
        ])
        observation = np.array([x, y, yaw])

        with self.lock:
            # reset the watchdog
            if self.watchdog is not None:
                self.watchdog.shutdown()
            self.watchdog = rospy.Timer(
                self.WATCHDOG_DELTA_T, self.watchdog_cb, True)

            # initialize the current time (as one update ago) if needed
            if self.current_time is None:
                self.current_time = pose_msg.header.stamp - self.DELTA_T

            # step the filter and resample using observation if it isn't too old
            if pose_msg.header.stamp > self.current_time:
                self.target_time = pose_msg.header.stamp
                self.filter.update(observation)
                self.publish_odom()
                self.open_loop_count = 0
            else:
                rospy.logwarn(
                    "Incoming measurement out of sync. Possible watchdog runaway. Resetting filter. Consider turning down supersampling")
                self.filter_reset()

    def publish_odom(self):
        """Publish odometry using current filter state."""
        state = self.filter.mean_state
        assert state is not None

        # wildly extrapolate to present time if requested
        if self.PREDICT_ENABLE:
            # save the current buffer and times since updates are destructive
            effort_buffer_bk = self.effort_buffer.copy()
            current_time_bk = self.current_time
            target_time_bk = self.target_time
            # predict the future state of the particles
            self.target_time = self.current_time + self.PREDICT_TIME
            particles = self.particle_dynamics_wrapper(self.filter.particles)
            # get the new mean_state
            state = np.sum(particles.T * self.filter.weights, axis=-1).T
            # restore the saved buffer and times
            self.effort_buffer = effort_buffer_bk
            self.current_time = current_time_bk
            self.target_time = target_time_bk

        # validate output
        if np.isnan(state).any():
            rospy.logwarn(
                "Performing automatic filter reset due to NaN output")
            self.filter_reset()
            state = np.sum(
                self.filter.particles.T * self.filter.weights, axis=-1).T

        # calculate odometry from filter prediction
        beta = atan(tan(state[5]) / 2.0)
        v_body = state[4] / cos(beta)
        curvature = 2.0 * sin(beta) / self.CAR_LENGTH
        x = state[0]
        y = state[1]
        theta = np.arctan2(state[2], state[3])
        vx_body = v_body * cos(beta)
        vy_body = v_body * sin(beta)
        omega = v_body * curvature

        # publish message
        odom_msg = Odometry()
        assert self.target_time is not None
        odom_msg.header.stamp = self.target_time
        odom_msg.header.frame_id = self.MAP_FRAME
        odom_msg.child_frame_id = self.BODY_FRAME
        odom_msg.pose.pose.position.x = x
        odom_msg.pose.pose.position.y = y
        x, y, z, w = quaternion_from_euler(0, 0, theta)
        odom_msg.pose.pose.orientation.x = x
        odom_msg.pose.pose.orientation.y = y
        odom_msg.pose.pose.orientation.z = z
        odom_msg.pose.pose.orientation.w = w
        odom_msg.twist.twist.linear.x = vx_body
        odom_msg.twist.twist.linear.y = vy_body
        odom_msg.twist.twist.angular.z = omega
        self.odom_pub.publish(odom_msg)

        # publish all particles if requested
        if self.PUB_PARTICLES:
            # create PoseArray msg to hold all particles' poses
            cloud_msg = PoseArray()
            cloud_msg.header.stamp = self.target_time
            cloud_msg.header.frame_id = self.MAP_FRAME
            for x, y, theta in self.filter.hypotheses:
                # create Pose msg
                particle_msg = Pose()
                particle_msg.position.x = x
                particle_msg.position.y = y
                x, y, z, w = quaternion_from_euler(0, 0, theta)
                particle_msg.orientation.x = x
                particle_msg.orientation.y = y
                particle_msg.orientation.z = z
                particle_msg.orientation.w = w
                # add Pose msg to PoseArray msg
                cloud_msg.poses.append(particle_msg)
            # publish PoseArray msg
            self.cloud_pub.publish(cloud_msg)

    def filter_reset(self):
        """Reset the filter."""
        assert self.lock.locked()
        self.filter.mean_state = None
        self.filter.init_filter()
        self.filter.weights = np.ones(
            self.filter.n_particles) / self.filter.n_particles
        self.effort_buffer.clear()
        self.current_time = None
        # kill the watchdog
        if self.watchdog is not None:
            self.watchdog.shutdown()
            self.watchdog = None

    def particle_dynamics_wrapper(self, particles):
        """Extrapolate all particles to future state, including true controls if known."""
        assert self.current_time is not None
        assert self.target_time is not None

        # step the filter as many times as needed to reach the target time
        while (self.current_time + self.DELTA_T/self.SUPERSAMPLING <= self.target_time):

            # find the most recent effort that was from a previous time
            effort = None
            try:
                # assume efforts in buffer are in proper order
                if self.effort_buffer[0].header.stamp <= self.current_time:
                    effort = self.effort_buffer[0]

                    while self.effort_buffer[1].header.stamp <= self.current_time:
                        self.effort_buffer.popleft()
                        effort = self.effort_buffer[0]

            except IndexError:
                pass

            # convert effort to a control array, if known
            if effort is None:
                control = None
            else:
                # add a little bit of noise to the known control
                control = self.rng.normal(
                    (effort.throttle * self.MAX_SPEED,
                     effort.steering * self.STEERING_THROW),
                    (self.THR_EFFORT_STD_DEV * self.MAX_SPEED,
                     self.STR_EFFORT_STD_DEV * self.STEERING_THROW),
                    (self.filter.n_particles, 2))

            # step the particles
            particles = self.particle_dynamics(particles, control)
            self.current_time += self.DELTA_T/self.SUPERSAMPLING

        return particles

    def particle_dynamics(self, particles, controls=None):
        """Extrapolate all particles to future state, including random control noise."""
        if controls is not None:
            # use the provided control noise
            v_rear_ref = controls[:, 0]
            psi_ref = controls[:, 1]
        else:
            # create random control noise using uniformly distributed efforts
            v_rear_ref = self.MAX_SPEED * self.rng.uniform(
                self.MIN_THROTTLE,
                self.MAX_THROTTLE,
                self.filter.n_particles)

            psi_ref = self.STEERING_THROW * self.rng.uniform(
                self.MIN_STEERING,
                self.MAX_STEERING,
                self.filter.n_particles)

        # make the below formulas more readable
        delta_t = (self.DELTA_T/self.SUPERSAMPLING).to_sec()

        # extract current states from particles matrix
        x = particles[:, 0]
        y = particles[:, 1]
        theta = np.arctan2(
            particles[:, 2],
            particles[:, 3])
        v_rear = particles[:, 4]
        psi = particles[:, 5]

        # update rear wheel velocity using 1st order model
        v_rear = (
            v_rear - v_rear_ref) * exp(-delta_t/self.THROTTLE_TAU) + v_rear_ref

        # update steering angle using massless acceleration to a fixed rate
        psi = np.where(np.abs(psi_ref - psi) < self.STEERING_RATE*delta_t,
                       psi_ref,
                       np.where(psi_ref > psi,
                                psi + self.STEERING_RATE*delta_t,
                                psi - self.STEERING_RATE*delta_t
                                )
                       )

        # using bicycle model, extrapolate future state
        return np.array([
            x + delta_t * v_rear * np.cos(theta + np.arctan(np.tan(psi) / 2.0)) * np.sqrt(np.square(np.tan(psi)) / 4.0 + 1),
            y + delta_t * v_rear * np.sin(theta + np.arctan(np.tan(psi) / 2.0)) * np.sqrt(np.square(np.tan(psi)) / 4.0 + 1),
            np.sin(theta + delta_t * v_rear * np.tan(psi) / self.CAR_LENGTH),
            np.cos(theta + delta_t * v_rear * np.tan(psi) / self.CAR_LENGTH),
            v_rear,
            psi]).T

    def particle_observation(self, particles):
        """Calculate expected measurements for each particle."""
        # measurement is x, y, theta
        return np.array([
            particles[:, 0],
            particles[:, 1],
            np.arctan2(
                particles[:, 2],
                particles[:, 3])
        ]).T

    def particle_weight(self, expected, observed):
        """Weigh each particle based off difference between observed and expected measurements."""
        # compute error (and minimize angles)
        error = expected - observed
        error[:, 2] = np.arctan2(np.sin(error[:, 2]), np.cos(error[:, 2]))

        # use a standard normal distribution to calculate probability of measurement given each particle
        sigma = np.array(
            [self.MEAS_LOC_STD_DEV, self.MEAS_LOC_STD_DEV, self.MEAS_DIR_STD_DEV])
        base = 1.0 / (sigma * sqrt(2.0*pi))
        prob_z_x = base * np.exp(np.square(error / sigma) / -2.0)
        # assume each state is independent
        prob_z_x = np.prod(prob_z_x, axis=1)

        # use law of total probability to calculate probability of measurement
        prob_z = np.sum(prob_z_x * self.filter.weights)

        # use Bayes rule to get probability of particle given measurement
        return prob_z_x * self.filter.weights / prob_z

    def particle_boundary_check(self, particles, __):
        """Apply a boundary check as an additional multiplicative weight on each particle."""
        return 1.0 * (
            1.0 * (np.abs(particles[:, 1]) < self.FIELD_HEIGHT/2.0) *
            1.0 * (np.abs(particles[:, 2]) < self.FIELD_WIDTH/2.0))

    def particle_init(self, num_particles):
        """Initial guesses for particle states."""
        if hasattr(self, 'filter') and self.filter.mean_state is not None:
            # return states with a gaussian distribution around the most recent state estimate
            random_location = self.rng.normal(
                self.filter.mean_state[0:2],
                self.GEN_LOC_STD_DEV,
                (num_particles, 2))
            mean_orientation = np.arctan2(
                self.filter.mean_state[2],
                self.filter.mean_state[3])
            random_orientation = self.rng.normal(
                mean_orientation,
                self.GEN_DIR_STD_DEV,
                (num_particles, 1))
            random_internal = self.rng.normal(
                self.filter.mean_state[4:6],
                (self.GEN_VEL_STD_DEV,
                 self.GEN_PSI_STD_DEV),
                (num_particles, 2))
            return np.concatenate((
                random_location,
                np.sin(random_orientation),
                np.cos(random_orientation),
                random_internal),
                axis=1)
        else:
            # states uniformly distributed across all valid ranges
            random_location = self.rng.uniform(
                (-self.FIELD_HEIGHT/2.0,
                 -self.FIELD_WIDTH/2.0),
                (self.FIELD_HEIGHT/2.0,
                 self.FIELD_WIDTH/2.0),
                (num_particles, 2))
            random_orientation = self.rng.uniform(
                -pi,
                pi,
                (num_particles, 1))
            random_internal = self.rng.uniform(
                (-self.MAX_SPEED,
                 -self.STEERING_THROW),
                (self.MAX_SPEED,
                 self.STEERING_THROW),
                (num_particles, 2))
            return np.concatenate((
                random_location,
                np.sin(random_orientation),
                np.cos(random_orientation),
                random_internal),
                axis=1)


if __name__ == "__main__":
    ParticleOdomFilter()
