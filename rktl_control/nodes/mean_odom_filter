#!/usr/bin/env python3
"""
Very simple node to estimate odometry from poses over time using a rolling
average filter.

License:
  BSD 3-Clause License
  Copyright (c) 2023, Autonomous Robotics Club of Purdue (Purdue ARC)
  All rights reserved.
"""

# ROS
import rospy
from nav_msgs.msg import Odometry
from geometry_msgs.msg import PoseWithCovarianceStamped
from tf.transformations import euler_from_quaternion, quaternion_from_euler

from collections import deque
from angles import shortest_angular_distance as sad
from math import sin, cos, atan2


class MeanOdomFilter(object):
    """Class to smooth pose estimations and predict velocity."""

    def __init__(self):
        rospy.init_node('mean_odom_filter')

        # constants
        self.MAP_FRAME = rospy.get_param('~frame_ids/map', 'map')
        self.BODY_FRAME = rospy.get_param('~frame_ids/body', 'base_link')

        self.POS_COUNT = rospy.get_param('~buffer_size/position', 3)
        self.VEL_COUNT = rospy.get_param('~buffer_size/velocity', 3)

        self.PREDICT_ENABLE = rospy.get_param('~delay/compensate', False)
        self.PREDICT_TIME = rospy.get_param('~delay/duration', 0.0)

        # variables
        self.buffer = deque(maxlen=max(self.POS_COUNT, self.VEL_COUNT+1))

        # pubs / subs
        self.odom_pub = rospy.Publisher('odom', Odometry, queue_size=1)
        node.create_subscription(PoseWithCovarianceStamped, 'pose_sync', self.pose_cb)

        # main loop
        rospy.spin()

    def pose_cb(self, pose_msg):
        """Callback for new poses."""
        assert (pose_msg.header.frame_id == self.MAP_FRAME)

        # add sample to buffer
        t = pose_msg.header.stamp
        x = pose_msg.pose.pose.position.x
        y = pose_msg.pose.pose.position.y
        __, __, yaw = euler_from_quaternion([
            pose_msg.pose.pose.orientation.x,
            pose_msg.pose.pose.orientation.y,
            pose_msg.pose.pose.orientation.z,
            pose_msg.pose.pose.orientation.w
        ])
        sample = (t, x, y, yaw)
        self.buffer.appendleft(sample)

        # check for enough samples
        if len(self.buffer) < 2:
            return

        # get current position and velocity estimates
        x, y, yaw = self.sample_position()
        vx, vy, omega = self.sample_velocity()

        # convert velocity to body frame
        body_vx = vx*cos(yaw) + vy*sin(yaw)
        body_vy = vy*cos(yaw) - vx*sin(yaw)

        # wildly extrapolate to a future time if requested
        if self.PREDICT_ENABLE:
            # perform a very simple prediction of location / orientation
            x += vx * self.PREDICT_TIME
            y += vy * self.PREDICT_TIME
            yaw += omega * self.PREDICT_TIME

        # publish message
        odom_msg = Odometry()
        odom_msg.header = pose_msg.header
        odom_msg.child_frame_id = self.BODY_FRAME
        odom_msg.pose.pose.position.x = x
        odom_msg.pose.pose.position.y = y
        x, y, z, w = quaternion_from_euler(0, 0, yaw)
        odom_msg.pose.pose.orientation.x = x
        odom_msg.pose.pose.orientation.y = y
        odom_msg.pose.pose.orientation.z = z
        odom_msg.pose.pose.orientation.w = w
        odom_msg.twist.twist.linear.x = body_vx
        odom_msg.twist.twist.linear.y = body_vy
        odom_msg.twist.twist.angular.z = omega
        self.odom_pub.publish(odom_msg)

    def sample_position(self):
        """Sample the buffer and generate an estimated position."""
        avg_x = 0
        avg_y = 0
        avg_hx = 0
        avg_hy = 0
        count = 0

        for __, x, y, yaw in self.buffer:
            if count == self.POS_COUNT:
                break
            else:
                avg_x += x
                avg_y += y
                avg_hx += cos(yaw)
                avg_hy += sin(yaw)
                count += 1

        avg_x /= count
        avg_y /= count
        avg_yaw = atan2(avg_hy, avg_hx)

        return (avg_x, avg_y, avg_yaw)

    def sample_velocity(self):
        """Sample the buffer and generate an estimated velocity."""
        avg_vx = 0
        avg_vy = 0
        avg_omega = 0
        count = 0

        old_buffer = self.buffer.copy()
        old_buffer.popleft()
        for new, old in zip(self.buffer, old_buffer):
            if count == self.VEL_COUNT:
                break
            else:
                delta_t = (new[0] - old[0]).to_sec()
                avg_vx += (new[1] - old[1]) / delta_t
                avg_vy += (new[2] - old[2]) / delta_t
                avg_omega += sad(old[3], new[3]) / delta_t
                count += 1

        avg_vx /= count
        avg_vy /= count
        avg_omega /= count

        return (avg_vx, avg_vy, avg_omega)


if __name__ == "__main__":
    MeanOdomFilter()
