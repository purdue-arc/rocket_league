#!/usr/bin/env python3
"""Delay an arbitrary ROS topic without modifying message
License:
  BSD 3-Clause License
  Copyright (c) 2022, Autonomous Robotics Club of Purdue (Purdue ARC)
  All rights reserved.
"""

import rospy, roslib.message
from collections import deque
import sys

class Delay(object):
    """Class to delay arbitrary messages."""
    def __init__(self):
        # get args
        assert len(sys.argv) >= 5
        input_name = sys.argv[1]
        output_name = sys.argv[2]
        topic_type = sys.argv[3]
        delay = float(sys.argv[4])

        # get class of type
        msg_class = roslib.message.get_message_class(topic_type)
        assert msg_class is not None

        # create node
        rospy.init_node('delay', anonymous=True)
        pub = rospy.Publisher(output_name, msg_class, queue_size=1)
        rospy.Subscriber(input_name, msg_class, self.msg_cb)
        self.buffer = deque()

        while not rospy.is_shutdown():
            try:
                time, msg = self.buffer.popleft()
                if (rospy.Time.now() - time).to_sec() > delay:
                    pub.publish(msg)
                else:
                    self.buffer.appendleft((time, msg))
            except IndexError:
                pass

    def msg_cb(self, msg):
        """Callback for enqueuing new message"""
        self.buffer.append((rospy.Time.now(), msg))

if __name__ == "__main__":
    Delay()