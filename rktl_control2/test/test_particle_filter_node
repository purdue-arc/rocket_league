#!/usr/bin/env python3
"""Tests particle filter's bicycle model matches expected.
License:
    BSD 3-Clause License
    Copyright (c) 2023, Autonomous Robotics Club of Purdue (Purdue ARC)
    All rights reserved.
"""

import unittest, rostest, rclpy
import numpy as np

# nasty way to import ParticleOdomFilter
import imp, os
path = os.path.abspath(f'{__file__ }/../../nodes/particle_odom_filter')
imp.load_source('particle_odom_filter', path)
from particle_odom_filter import ParticleOdomFilter

class TestBicycle(unittest.TestCase):
    def test_bicycle(self):
        # avoid spinning in init function
        rclpy.spin = lambda : None
        filter = ParticleOdomFilter()

        particles = np.array([
            [-1.3499,   -0.2050,    0.6715,    1.0347,    0.8884],
            [ 3.0349,   -0.1241,   -1.2075,    0.7269,   -1.1471],
            [ 0.7254,    1.4897,    0.7172,   -0.3034,   -1.0689],
            [-0.0631,    1.4090,    1.6302,    0.2939,   -0.8095],
            [ 0.7147,    1.4172,    0.4889,   -0.7873,   -2.9443]
        ])
        # adjust to new sin/cos state
        particles = np.concatenate((
            particles[:,0:2],
            np.sin(particles[:,2:3]),
            np.cos(particles[:,2:3]),
            particles[:,3:5]),
            axis=1)

        controls = np.array([
            [ 0.6294,   -0.8049],
            [ 0.8116,   -0.4430],
            [-0.7460,    0.0938],
            [ 0.8268,    0.9150],
            [ 0.2647,    0.9298]
        ])

        expected = np.array([
            [-1.3104,   -0.1099,   10.6445,    0.9011,    0.8360],
            [ 2.9933,   -0.2207,  -15.8456,    0.7548,   -1.0947],
            [ 0.6677,    1.4875,    7.9764,   -0.4494,   -1.0165],
            [-0.0437,    1.4572,   -2.8071,    0.4696,   -0.7571],
            [ 0.6785,    1.3915,   -0.6342,   -0.4405,   -2.8919]
        ])
        # adjust to new sin/cos state
        expected = np.concatenate((
            expected[:,0:2],
            np.sin(expected[:,2:3]),
            np.cos(expected[:,2:3]),
            expected[:,3:5]),
            axis=1)

        out = filter.particle_dynamics(particles=particles, controls=controls)
        self.assertTrue(np.allclose(out, expected, atol=0.01),
            msg=f'Received output:\n{out}\n does not match expected:\n{expected}')

if __name__ == '__main__':
    rostest.run('rktl_control', 'test_bicycle', TestBicycle)