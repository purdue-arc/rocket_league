#!/usr/bin/env python3
"""CartPole-v0 environment with ROS bindings for testing.
License:
  BSD 3-Clause License
  Copyright (c) 2023, Autonomous Robotics Club of Purdue (Purdue ARC)
  All rights reserved.
"""

# ROS
import rospy
from std_msgs.msg import Int32, Float32, Float32MultiArray, Bool
from std_srvs.srv import Empty, EmptyResponse

import gym
from threading import Lock

class CartPole(object):
    def __init__(self):
        rospy.init_node('cart_pole_node')
        self.RENDER = rospy.get_param('~render', False)

        self.env = gym.make('CartPole-v0')
        self.observation = self.env.reset() 
        self.reward=0
        self.done=0
        self.action=None
        self.lock = Lock()

        # Publishers
        self.obs_pub = rospy.Publisher('cartpole/observation', Float32MultiArray, queue_size=1) 
        self.reward_pub = rospy.Publisher('cartpole/reward', Float32, queue_size=1)
        self.done_pub = rospy.Publisher('cartpole/done', Bool, queue_size=1)

        # Subscribers
        node.create_subscription(Int32, 'cartpole/action', self.cartpole_action)

        # Services
        rospy.Service('cartpole/reset', Empty, self.cartpole_reset)

        # Timers
        rospy.Timer(rospy.Duration(rospy.get_param('~frequency', 1/30)), self.cartpole_step)
        rospy.spin()

    def cartpole_step(self,event=None):
        """Step time once."""
        with self.lock:
            if self.action is not None and self.done == False:
                self.observation, self.reward, self.done, __ = self.env.step(self.action)

            self.obs_pub.publish(None, self.observation)
            self.reward_pub.publish(self.reward)
            self.done_pub.publish(self.done)

            if self.RENDER:
                self.env.render()

    def cartpole_action(self, action_msg):
        """Callback for actions."""
        self.action = action_msg.data

    def cartpole_reset(self, __):
        """Reset the environment."""
        with self.lock:
            self.observation=self.env.reset() 
            self.reward=0
            self.done=0
            self.action=None
        return EmptyResponse()

if __name__ == "__main__":
    CartPole()
