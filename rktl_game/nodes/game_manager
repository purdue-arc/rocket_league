#!/usr/bin/env python3
"""Use ball location to determine when a goal is scored.
License:
  BSD 3-Clause License
  Copyright (c) 2023, Autonomous Robotics Club of Purdue (Purdue ARC)
  All rights reserved.
"""



# ROS
<<<<<<< HEAD:rktl_game/rktl_game/nodes/game_manager
import rclpy
from rclpy.node import Node
from rclpy.parameter import Parameter
=======
import rospy
>>>>>>> ca905a3b4d4e46424951436dcabe807b814ea5ee:rktl_game/nodes/game_manager
from std_msgs.msg import Bool, Header
from nav_msgs.msg import Odometry
from rktl_msgs.msg import Score, MatchStatus
from std_srvs.srv import Empty, EmptyResponse

class ScoreKeeper():
    def __init__(self, node_name='score_keeper'):
        super().__init__()

        self.orange_score = 0
        self.blue_score = 0
        self.orange_goal = (self.node.get_parameter_or('/field/length', 1).get_parameter_value().integer_value - 0.15) / 2 
        self.blue_goal = (self.node.get_parameter_or('/field/length', 1).get_paramter_value().integer_value  - 0.15) / -2
        self.enabled = False
        self.match_status = 0
        self.game_clock = self.node.get_parameter_or('/game_length', 90).get_paramter_value().integer_value
        self.manager_rate = self.node.get_parameter_or('manager_rate', 10).get_parameter_value().integer_value

        # Publishers
        self.match_status_pub = self.node.create_publisher(MatchStatus, 'match_status', qos_profile=1)
        self.active_pub = self.node.create_publisher(Bool, 'cars/enable', qos_profile=1)

        # Subscribers
        node.create_subscription(Odometry, 'ball/odom', self.check_goal)
        node.create_subscription(Bool, 'cars/enable', self.enable)

        # Services
        rclpy.Service('reset_game', Empty, self.reset)
        rclpy.Service('unpause_game', Empty, self.unpause)
        rclpy.Service('pause_game', Empty, self.pause)

        # Counts loops and decrements game clock every second
        self.timer_ctr = 0
        # main loop
        rate = self.node.Rate(self.manager_rate)
        while not self.node.is_shutdown():
            if self.match_status == 1:
                self.timer_ctr += 1
                if self.timer_ctr == self.manager_rate:
                    self.timer_ctr = 0
                    self.game_clock -= 1
            self.update_status()
            rate.sleep()

    def update_status(self):
        if (self.match_status == 1 and self.game_clock == 0):
            if (self.orange_score > self.blue_score):
                self.match_status = 3
            else:
                self.match_status = 4
        score = Score(self.orange_score, self.blue_score)
        header = Header()
        header.stamp = self.node.Time.now()
        self.match_status_pub.publish(MatchStatus(header, self.match_status, self.game_clock, score))

    def pause(self, _):
        self.enabled = False
        self.match_status = 0
        self.active_pub.publish(False)
        return EmptyResponse()

    def reset(self, _):
        self.orange_score = 0
        self.blue_score = 0
        self.enabled = False
        self.match_status = 0
        self.game_clock = self.node.get_parameter_or('/game_length', 90).get_paramter_value().integer_value
        self.active_pub.publish(False)
        header = Header()
        header.stamp = self.node.Time.now()
        self.match_status_pub.publish(MatchStatus(header, 0, self.game_clock, Score(0, 0)))
        return EmptyResponse()

    def unpause(self, _):
        self.enabled = True
        self.match_status = 1
        self.active_pub.publish(True)
        return EmptyResponse()

    def check_goal(self, ball_pose: Odometry):
        if self.enabled:
            # Check if ball is in goal
            if ball_pose.pose.pose.position.x >= self.orange_goal:
                self.orange_score += 1
                self.pause(self)
            elif ball_pose.pose.pose.position.x <= self.blue_goal:
                self.blue_score += 1
                self.pause(self)

    def enable(self, data: Bool):
        # enable after a goal is scored & cars are replaced
        if data.data:
            self.enabled = True

if __name__ == "__main__":
    ScoreKeeper()
