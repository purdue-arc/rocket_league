#!/usr/bin/env python3
"""Convenience node to plot training progress.
License:
  BSD 3-Clause License
  Copyright (c) 2023, Autonomous Robotics Club of Purdue (Purdue ARC)
  All rights reserved.
"""

import rospy
from diagnostic_msgs.msg import DiagnosticStatus
from mpl_toolkits.axes_grid1 import host_subplot
import mpl_toolkits.axisartist as AA
import matplotlib
matplotlib.use('PS')
import matplotlib.pyplot as plt
from numpy import append
from os.path import expanduser, normpath

class Plotter(object):
    """Plot progress during training."""
    def __init__(self):
        rospy.init_node('model_progress_plotter')

        # Constants
        self.LOG_DIR = normpath(expanduser(rospy.get_param('~log/base_dir')))
        self.PLOT_FREQ = rospy.get_param('~log/plot_freq', 25)
        self.BASIC_VARS = rospy.get_param('~log/basic', ["duration"])
        self.ADVANCED_VARS = rospy.get_param('~log/advanced', ["net_reward"])

        self.KEYS = ["episode"] + self.BASIC_VARS + self.ADVANCED_VARS
        
        # Subscribers
        rospy.Subscriber('~log', DiagnosticStatus, self.progress_cb)

        self.history = None
        self.LOG_NAME = None
        self.next_plot_episode = self.PLOT_FREQ
        self.init_plot()

        rospy.spin()

    def init_plot(self):
        """Initialize the plot and all axes."""
        labels = self.BASIC_VARS + self.ADVANCED_VARS

        # create host
        plt.figure(figsize=(11,8.5))
        self.host = host_subplot(111, axes_class=AA.Axes)

        plt.title("Training Log")
        self.host.set_xlabel("Episode")
        self.host.set_ylabel(labels[0])

        self.axes = {labels[0]:self.host}

        # create exta axes
        extras = len(labels) - 1
        plt.subplots_adjust(right = 0.96 - 0.07*extras)
        offset = 0
        for label in labels[1:]:
            axis = self.host.twinx()
            axis.axis["right"] = axis.get_grid_helper().new_fixed_axis(loc="right", axes=axis, offset=(offset, 0))
            axis.axis["right"].toggle(all=True)
            axis.set_ylabel(label)
          
            self.axes[label] = axis
            offset += 60

        # create lines
        self.lines = {}

        for var in self.BASIC_VARS:
            line, = self.axes[var].plot(-1, 0, label=var)
            self.lines[var] = line

        for var in self.ADVANCED_VARS:
            line_max, = self.axes[var].plot(-1, 0, ':', label=var+"/max")
            line_avg, = self.axes[var].plot(-1, 0, '-', label=var+"/avg", color=line_max.get_color())
            line_min, = self.axes[var].plot(-1, 0, ':', label=var+"/min", color=line_max.get_color())
            
            self.lines[var+"/max"] = line_max
            self.lines[var] = line_avg
            self.lines[var+"/min"] = line_min

        # create legend
        self.host.legend()

        # color y axes
        for var, axis in self.axes.items():
            axis.axis["left"].label.set_color(self.lines[var].get_color())
            axis.axis["right"].label.set_color(self.lines[var].get_color())

    def progress_cb(self, progress_msg):
        """Track training progress and save when configured to."""
        if self.LOG_NAME is None and progress_msg.hardware_id:
            self.LOG_NAME = '/' + progress_msg.hardware_id.replace(':', '/plot_') + '.png'

        data = {}

        for item in progress_msg.values:
            if item.key in self.KEYS:
                data[item.key] = float(item.value)

        if data["episode"] is not None:
            if self.history is None:
                self.history = [data]
            else:
                self.history.append(data)

            if data["episode"] >= self.next_plot_episode:
                self.plot()
                self.next_plot_episode += self.PLOT_FREQ
                self.history = None
        else:
            rospy.logerr("Bad progress message.")

    def plot(self):
        """Add new data to plot, show, and save"""
        # calculate the avgs, mins, maxs of all variables
        sums = {key:0.0 for key in self.BASIC_VARS+self.ADVANCED_VARS}
        mins = {key:float("inf") for key in self.ADVANCED_VARS}
        maxs = {key:float("-inf") for key in self.ADVANCED_VARS}

        for episode in self.history:
            for var, value in episode.items():
                if var in sums:
                    sums[var] += value
                if var in mins:
                    mins[var] = min(mins[var], value)
                if var in maxs:
                    maxs[var] = max(maxs[var], value)

        # calculate the avg of all variables
        avgs = {key:sums[key]/len(self.history) for key in self.BASIC_VARS+self.ADVANCED_VARS}

        # update lines
        episode = self.history[-1]["episode"]

        for var in self.BASIC_VARS:
            line = self.lines[var]
            line.set_xdata(append(line.get_xdata(), episode))
            line.set_ydata(append(line.get_ydata(), avgs[var]))

        for var in self.ADVANCED_VARS:
            #  avg
            line = self.lines[var]
            line.set_xdata(append(line.get_xdata(), episode))
            line.set_ydata(append(line.get_ydata(), avgs[var]))

            # max
            line = self.lines[var+"/max"]
            line.set_xdata(append(line.get_xdata(), episode))
            line.set_ydata(append(line.get_ydata(), maxs[var]))

            # min
            line = self.lines[var+"/min"]
            line.set_xdata(append(line.get_xdata(), episode))
            line.set_ydata(append(line.get_ydata(), mins[var]))

        # update plot
        for var, axis in self.axes.items():
            axis.relim()
            axis.autoscale()
        self.host.set_xlim(0, episode)
        plt.draw()

        # update file
        rospy.loginfo(f"Saving training progress to {self.LOG_DIR}{self.LOG_NAME}")
        plt.savefig(self.LOG_DIR + self.LOG_NAME)

if __name__ == "__main__":
    Plotter()
