#!/usr/bin/env python3
"""Create a depth map to project camera data onto ground plane
License:
  BSD 3-Clause License
  Copyright (c) 2023, Autonomous Robotics Club of Purdue (Purdue ARC)
  All rights reserved.
"""

# ROS
import rclpy
from sensor_msgs.msg import Image, CameraInfo
from tf2_ros import Buffer, TransformListener
from rktl_dependencies.transformations import translation_matrix, quaternion_matrix

import numpy as np


class Projector(rclpy.Node):
    """Class to synchronize and buffer all poses."""

    def __init__(self):
        #self.init_node('projector')
        super().init_node('projector')
        #self.depth_pub = rospy.Publisher('depth_rect', Image, queue_size=1)
        self.depth_pub = self.create_publisher(Image, 'depth_rect', queue_size=1)
        #rospy.Subscriber('camera_info', CameraInfo, self.camera_info_cb)
        self.subscription = self.create_subscription(CameraInfo, 'camera_info',self.camera_info_cb)

        # constants
        #self.GROUND_HEIGHT = rospy.get_param('~ground_height', 0.0)
        self.GROUND_HEIGHT = self.get_parameter_or('~ground_height', 0.0).get_parameter_value().float_value

        # used to access TF tree
        buffer = Buffer()
        TransformListener(buffer)

        # variables that are needed from camera_info
        self.initialized = False
        self.frame_id = None
        self.width = None
        self.height = None
        self.cam_to_img = None

        # variables that are needed from main loop
        self.img_msg = None

        # rate at which to re-compute depth map
        #rate = rospy.Rate(1.0/rospy.get_param('~update_period', 1))
        #rate = rclpy.Rate(1.0/rclpy.get_parameter_or('~update_period', 1).get_parameter_value().integer_value)
        self._loop_rate = self.create_rate(1.0/self.get_parameter_or('~update_period', 1).get_parameter_value().integer_value, self.get_clock())

        # compute depth map in main loop and cache since it is slow changing
        # publish latest in callback so that the stamps match (for rviz)
        while not rclpy.ok():
            # check if camera_info callback has been run
            if not self.initialized:
                continue

            # get camera location via TF tree
            #try:
            #    map_to_cam_msg = buffer.lookup_transform(
            #        self.frame_id, 'map', rospy.Time())
            #except:
            try:
                map_to_cam_msg = buffer.lookup_transform(
                    self.frame_id, 'map', self.get_clock().now().to_msg())
            except:
                continue

            # pull translation and quaternion from pose msg
            translation = np.array([
                map_to_cam_msg.transform.translation.x,
                map_to_cam_msg.transform.translation.y,
                map_to_cam_msg.transform.translation.z])
            quaternion = np.array([
                map_to_cam_msg.transform.rotation.x,
                map_to_cam_msg.transform.rotation.y,
                map_to_cam_msg.transform.rotation.z,
                map_to_cam_msg.transform.rotation.w])
            # create transformation matrix
            map_to_cam = translation_matrix(
                translation) @ quaternion_matrix(quaternion)

            # ground plane in map space (X direction, Y direction, origin point)
            # any [a,b,1].T input results in a point on the ground plane
            ground_plane = np.array(
                [[1, 0, 0, 0],
                 [0, 1, 0, 0],
                 [0, 0, self.GROUND_HEIGHT, 1]]).T

            # depth * [u,v,1].T = cam_to_img x map_to_cam x ground_plane x [a,b,1].T
            # [u,v,1].T = cam_to_img x map_to_cam x ground_plane x [A,B,1/depth].T

            # create matrix of all pixels
            w = self.width
            h = self.height
            u = np.arange(stop=w).reshape((1, w, 1, 1))
            v = np.arange(stop=h).reshape((h, 1, 1, 1))

            u = np.broadcast_to(u, (h, w, 1, 1))
            v = np.broadcast_to(v, (h, w, 1, 1))
            one = np.broadcast_to(1, (h, w, 1, 1))

            img = np.concatenate((u, v, one), axis=2)

            # reshape matrix
            mat = (self.cam_to_img @ map_to_cam @
                   ground_plane).reshape((1, 1, 3, 3))
            mat = np.broadcast_to(mat, (h, w, 3, 3))

            # solve for all pixels at once
            depth = np.linalg.solve(mat, img)
            # extract depth
            depth = 1.0/(depth[:, :, 2, 0].reshape((h, w)))

            # create message
            if self.img_msg is None:
                self.img_msg = Image()
                self.img_msg.header.frame_id = self.frame_id
                self.img_msg.height = h
                self.img_msg.width = w
                self.img_msg.encoding = '32FC1'
                self.img_msg.step = 4*w
            self.img_msg.data = depth.astype('float32').tobytes()

            # delay since making the depth map is expensive
            try:
                self._loop_rate.sleep()
                #rate.sleep()
            except:
                pass

    def camera_info_cb(self, info_msg):
        """Callback for publishing depth map"""
        # extract relevant data if first time
        if not self.initialized:
            self.frame_id = info_msg.header.frame_id
            self.width = info_msg.width
            self.height = info_msg.height
            self.cam_to_img = np.array(info_msg.P).reshape((3, 4))
            self.initialized = True

        # publish latest depth map
        if self.img_msg is not None:
            self.img_msg.header.stamp = info_msg.header.stamp
            self.depth_pub.publish(self.img_msg)

def main(args=None):
    rclpy.init(args=args)
    projector = Projector()
    rclpy.spin(projector)
    rclpy.shutdown()

if __name__ == "__main__":
    main()
