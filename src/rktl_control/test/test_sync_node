#!/usr/bin/env python3
"""Tests for pose synchronizer. It will verify it can handle 3 input streams.
License:
  BSD 3-Clause License
  Copyright (c) 2023, Autonomous Robotics Club of Purdue (Purdue ARC)
  All rights reserved.
"""

import unittest, rostest, rclpy
import sys
from geometry_msgs.msg import PoseWithCovarianceStamped
from rktl_dependencies.transformations import euler_from_quaternion, quaternion_from_euler
import numpy as np

def set_pose(t, x, y, yaw, weight=1.0):
    """Helper to construct pose msgs."""
    pose_msg = PoseWithCovarianceStamped()
    pose_msg.header.frame_id = "map"
    pose_msg.header.stamp = t
    pose_msg.pose.pose.position.x = x
    pose_msg.pose.pose.position.y = y
    pose_msg.pose.pose.position.z = weight
    x, y, z, w = quaternion_from_euler(0, 0, yaw)
    pose_msg.pose.pose.orientation.x = x
    pose_msg.pose.pose.orientation.y = y
    pose_msg.pose.pose.orientation.z = z
    pose_msg.pose.pose.orientation.w = w
    return pose_msg

def get_pose(pose_msg):
    """Helper to deconstruct pose msgs."""
    assert pose_msg.header.frame_id == "map"
    t = pose_msg.header.stamp
    x = pose_msg.pose.pose.position.x
    y = pose_msg.pose.pose.position.y
    __, __, yaw = euler_from_quaternion([
        pose_msg.pose.pose.orientation.x,
        pose_msg.pose.pose.orientation.y,
        pose_msg.pose.pose.orientation.z,
        pose_msg.pose.pose.orientation.w
    ])
    return (t, x, y, yaw)

class TestSync(unittest.TestCase):
    def test_sync(self):
        # initialize node and interface to code under test
        rclpy.init(args=sys.args)
        self.node = rclpy.create_node('test_sync_node')

        car0_pub = self.node.create_publisher(PoseWithCovarianceStamped, 'cars/car0/pose', queue_size=0, latch=True)
        car1_pub = self.node.create_publisher(PoseWithCovarianceStamped, 'cars/car1/pose', queue_size=0, latch=True)
        ball_pub = self.node.create_publisher(PoseWithCovarianceStamped, 'ball/pose', queue_size=0, latch=True)

        self.node.create_subscription(PoseWithCovarianceStamped, 'cars/car0/pose_sync', self.car0_cb)
        self.node.create_subscription(PoseWithCovarianceStamped, 'cars/car1/pose_sync', self.car1_cb)
        self.node.create_subscription(PoseWithCovarianceStamped, 'ball/pose_sync', self.ball_cb)

        # member variables used for test
        self.last_car0 = None
        self.last_car1 = None
        self.last_ball = None


        # publish messages to get things going
        self.node.get_logger().info("synchronizing with node under test")
        t = self.node.get_clock().now().to_msg() + rclpy.time.Time(0.5)
        car0_pub.publish(set_pose(t, 0.0, 0.0, 0.0))
        car1_pub.publish(set_pose(t, 0.0, 0.0, 0.0))
        ball_pub.publish(set_pose(t, 0.0, 0.0, 0.0))

        while(not self.have_poses()):
            pass
        self.assertTrue(self.times_match(), msg='output time is not synchronized')

        # case 1
        self.node.get_logger().info("testing independence of channels, divide by zero, weights")
        t_next = self.last_car0[0] + rclpy.time.Time(0.1)
        self.clear_poses()

        # send poses
        car0_pub.publish(set_pose(t_next, 1.0, 1.0, 1.5))
        car0_pub.publish(set_pose(t_next, 1.1, 1.1, 0.0))

        car1_pub.publish(set_pose(t_next, -1.0, -1.0, 0.0))
        car1_pub.publish(set_pose(t_next, -1.1, -1.1, -1.5))

        ball_pub.publish(set_pose(t_next, 1.0, -1.0, -1.0))
        ball_pub.publish(set_pose(t_next, 2.0, -2.0, -1.0))
        ball_pub.publish(set_pose(t_next, 4.0, -4.0, 1.0, weight=2.0))
        ball_pub.publish(set_pose(t_next, -10, -10, -0.5, weight=0.0))

        # wait for response
        while(not self.have_poses()):
            pass

        # check response
        self.assertTrue(self.times_match(), msg='output time is not synchronized')
        self.assertAlmostEqual(self.last_car0[0].to_sec(), t_next.to_sec(), places=2, msg='output time is incorrect')
        self.assertTrue(np.allclose(self.last_car0[1:], [1.05, 1.05, 0.75]), msg='car0 pose is incorrect')
        self.assertTrue(np.allclose(self.last_car1[1:], [-1.05, -1.05, -0.75]), msg='car1 pose is incorrect')
        self.assertTrue(np.allclose(self.last_ball[1:], [2.75, -2.75, 0.0]), msg='ball pose is incorrect')

        # case 2
        self.node.get_logger().info("testing old data rejection, caching of future data")
        t_next = self.last_car0[0] + rclpy.time.Time(0.1)
        self.clear_poses()
        t_old = t_next - rclpy.time.Time(0.06)
        t_future = t_next + rclpy.time.Time(0.06)

        # send poses
        car0_pub.publish(set_pose(t_old, 0.0, 0.0, 0.0))
        car0_pub.publish(set_pose(t_next, 1.0, 1.0, 1.0))
        car0_pub.publish(set_pose(t_future, 3.0, 2.0, 1.0))

        car1_pub.publish(set_pose(t_old, 0.0, 0.0, 0.0))
        car1_pub.publish(set_pose(t_next, 1.0, 1.0, 1.0))
        car1_pub.publish(set_pose(t_future, 3.0, 2.0, 1.0))

        ball_pub.publish(set_pose(t_old, 0.0, 0.0, 0.0))
        ball_pub.publish(set_pose(t_next, 1.0, 1.0, 1.0))
        ball_pub.publish(set_pose(t_future, 3.0, 2.0, 1.0))

        # wait for response
        while(not self.have_poses()):
            pass

        # check response
        self.assertTrue(self.times_match(), msg='output time is not synchronized')
        self.assertAlmostEqual(self.last_car0[0].to_sec(), t_next.to_sec(), places=2, msg='output time is incorrect')
        self.assertTrue(np.allclose(self.last_car0[1:], [1.0, 1.0, 1.0]), msg='car0 pose is incorrect')
        self.assertTrue(np.allclose(self.last_car1[1:], [1.0, 1.0, 1.0]), msg='car1 pose is incorrect')
        self.assertTrue(np.allclose(self.last_ball[1:], [1.0, 1.0, 1.0]), msg='ball pose is incorrect')

        # case 3
        self.node.get_logger().info("testing caching of future data, sorting out of order data")
        t_next = self.last_car0[0] + rclpy.time.Time(0.1)
        self.clear_poses()
        t_delayed = t_next - rclpy.time.Time(0.04)

        # send poses
        car0_pub.publish(set_pose(t_delayed, 0.0, 0.0, 0.0))
        car1_pub.publish(set_pose(t_delayed, 0.0, 0.0, 0.0))
        ball_pub.publish(set_pose(t_delayed, 0.0, 0.0, 0.0))

        # wait for response
        while(not self.have_poses()):
            pass

        # check response
        self.assertTrue(self.times_match(), msg='output time is not synchronized')
        self.assertAlmostEqual(self.last_car0[0].to_sec(), t_next.to_sec(), places=2, msg='output time is incorrect')
        self.assertTrue(np.allclose(self.last_car0[1:], [1.5, 1.0, 0.5]), msg='car0 pose is incorrect')
        self.assertTrue(np.allclose(self.last_car1[1:], [1.5, 1.0, 0.5]), msg='car1 pose is incorrect')
        self.assertTrue(np.allclose(self.last_ball[1:], [1.5, 1.0, 0.5]), msg='ball pose is incorrect')

    def car0_cb(self, pose_sync_msg):
        """Callback for car0 pose_sync."""
        self.last_car0 = get_pose(pose_sync_msg)

    def car1_cb(self, pose_sync_msg):
        """Callback for car1 pose_sync."""
        self.last_car1 = get_pose(pose_sync_msg)

    def ball_cb(self, pose_sync_msg):
        """Callback for ball pose_sync."""
        self.last_ball = get_pose(pose_sync_msg)

    def have_poses(self):
        """Helper to see if poses arrived."""
        return (
            self.last_car0 is not None and
            self.last_car1 is not None and
            self.last_ball is not None
        )

    def clear_poses(self):
        """Helper to reset to see if poses arrived."""
        self.last_car0 = None
        self.last_car1 = None
        self.last_ball = None

    def times_match(self):
        """Helper to see if poses have matching times."""
        assert self.have_poses()
        return (
            (self.last_car0[0] == self.last_car1[0]) and
            (self.last_car0[0] == self.last_ball[0])
        )

if __name__ == '__main__':
    rostest.rosrun('rktl_control', 'test_pose_sync', TestSync)