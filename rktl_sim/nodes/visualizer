#!/usr/bin/env python3
"""Node to run the visualizer with ROS bindings.
License:
  BSD 3-Clause License
  Copyright (c) 2023, Autonomous Robotics Club of Purdue (Purdue ARC)
  All rights reserved.
"""

# 3rd party modules
import math
from std_msgs.msg import Float32
from nav_msgs.msg import Odometry
import rospy
from tf.transformations import euler_from_quaternion
import numpy as np
from std_srvs.srv import Empty, EmptyResponse

# Local library
import visualizer
from rktl_msgs.msg import Path, BezierPathList
from rktl_planner import BezierPath

class Visualizer(object):
    """ROS wrapper for the visualizer."""

    def __init__(self):
        rospy.init_node("visualizer")

        # Collecting global parameters
        field_width = rospy.get_param('/field/width')
        field_length = rospy.get_param('/field/length')
        wall_thickness = rospy.get_param('/field/wall_thickness')
        goal_width = rospy.get_param('/field/goal/width')
        self.ball_radius = rospy.get_param("/ball/radius")
        self.car_width = rospy.get_param("/cars/width")
        self.car_length = rospy.get_param("/cars/length")

        # Creating pygame render
        self.window = visualizer.Window(
            field_width, field_length, wall_thickness,
            rospy.get_param('~window_name', 'Rocket League Visualizer'))

        # Collecting private parameters
        self.frame_id = rospy.get_param("~frame_id", "map")
        self.timeout = rospy.get_param("~timeout", 10)
        rate = rospy.Rate(rospy.get_param("~rate", 20))
        car_width = rospy.get_param("~cars/body_width")
        car_length = rospy.get_param("~cars/body_length")

        self.car_img_path = rospy.get_param('~media/car', None)
        if self.car_img_path is None:
            rospy.logwarn('no car image specified, not visualizing car')

        self.ball_img_path = rospy.get_param('~media/ball', None)
        if self.ball_img_path is None:
            rospy.logwarn('no ball image specified, not visualizing ball')

        # Setting up field
        self.field_assets = []
        field_img_path = rospy.get_param("~media/field", None)
        if field_img_path is not None:
            asset = visualizer.Image(
                self.window.scale_size(field_width),
                self.window.scale_size(field_length),
                field_img_path)
            x, y = self.window.transform_pos(0, 0)
            asset.set_pos(x, y)
            self.field_assets.append(asset)

        # Setting up goals
        asset = visualizer.Rectangle( self.window.scale_size(goal_width), 
            self.window.scale_size(wall_thickness), (255,255,255))
        x, y = self.window.transform_pos((field_length / 2) + (wall_thickness / 2), 0)
        asset.set_pos(x, y)
        self.field_assets.append(asset)
        
        asset = visualizer.Rectangle( self.window.scale_size(goal_width), 
            self.window.scale_size(wall_thickness), (255,255,255))
        x, y = self.window.transform_pos(-((field_length / 2) + (wall_thickness / 2)), 0)
        asset.set_pos(x, y)
        self.field_assets.append(asset)

        # Setup object assets
        self.object_subs = []
        self.refresh_assets(None)
        rospy.Service('visualizer_refresh', Empty, self.refresh_assets)

        while not rospy.is_shutdown():
            try:
                self.window.show()
            except self.window.ShutdownError:
                exit()
            try:
                rate.sleep()
            except rospy.ROSInterruptException:
                pass

    def refresh_assets(self, _):
        self.window.reset_assets()
        for asset in self.field_assets:
            self.window.add_asset(asset)

        if len(self.object_subs) > 0:
            for sub in self.object_subs:
                sub.unregister()

        self.object_subs = []
        topics = rospy.get_published_topics()
        for topic_name, _ in topics:
            topic_ns = topic_name.split('/')[1:]
            
            asset = None
            if topic_ns[0] == "cars":
                if self.car_img_path is not None:
                    width = self.window.scale_size(self.car_width)
                    length = self.window.scale_size(self.car_length)
                    
                    if len(topic_ns) < 3:
                        continue
                    elif topic_ns[2] == "odom":
                        asset = visualizer.Image(width, length,
                            self.car_img_path)
                        self.object_subs.append(
                            rospy.Subscriber(topic_name, Odometry,
                            self.car_odom_cb, asset))
                    elif topic_ns[2] == "odom_truth":
                        asset = visualizer.Image(width, length,
                            self.car_img_path, opacity=128)
                        self.object_subs.append(
                            rospy.Subscriber(topic_name, Odometry,
                            self.car_odom_cb, asset))
                    elif topic_ns[2] == "lookahead_pnt":
                        asset = visualizer.Circle((255,0,0), 0)
                        self.object_subs.append(
                            rospy.Subscriber(topic_name, Float32,
                            self.lookahead_cb, asset))
            elif topic_ns[0] == "ball":
                if self.ball_img_path is not None:
                    diameter = self.window.scale_size(self.ball_radius * 2)
                    if topic_ns[1] == "odom":
                        asset = visualizer.Image(diameter, diameter,
                            self.ball_img_path)
                    elif topic_ns[1] == "odom_truth":
                        asset = visualizer.Image(diameter, diameter,
                            self.ball_img_path, opacity=128)
                    else:
                        continue

                    self.object_subs.append(
                        rospy.Subscriber(topic_name, Odometry,
                        self.ball_odom_cb, asset))
            elif topic_ns[0] == "agents" and topic_ns[2] == "bezier_path":
                asset = visualizer.Lines((255,0,0))
                self.object_subs.append(
                    rospy.Subscriber(topic_name, BezierPathList,
                    self.bezier_path_cb, asset))

            if asset != None:
                self.window.add_asset(asset)
        return EmptyResponse()

    def car_odom_cb(self, odom_msg, asset):
        """Callback for car odometry messages."""
        field_x = odom_msg.pose.pose.position.x
        field_y = odom_msg.pose.pose.position.y
        x, y = self.window.transform_pos(field_x, field_y)
        asset.set_pos(x, y)

        orient = odom_msg.pose.pose.orientation
        quat = [orient.x, orient.y, orient.z, orient.w]
        heading = euler_from_quaternion(quat)[2]
        heading = heading * 180. / math.pi
        asset.set_angle(heading)

    def ball_odom_cb(self, odom_msg, asset):
        """Callback for ball odometry messages."""
        field_x = odom_msg.pose.pose.position.x
        field_y = odom_msg.pose.pose.position.y
        x, y = self.window.transform_pos(field_x, field_y)
        asset.set_pos(x, y)

    def path_arr_cb(self, path_msg: Path, asset):
        """Callback for path array messages."""
        asset.reset_points()
        path = path_msg.waypoint
        for point in path:
            field_x = point.pose.position.x
            field_y = point.pose.position.y
            x, y = self.window.transform_pos(field_x, field_y)
            asset.set_pos(x, y)
    
    def bezier_path_cb(self, msg: BezierPathList, asset):
        """Callback for bezier path messages."""
        asset.reset_points()
        paths = [BezierPath(x) for x in msg.paths]
        for path in paths:
            sec = path.duration.to_sec()
            for t in np.linspace(0., sec, int(50 * sec + 0.5)):
                point = path.at(t)
                x, y = self.window.transform_pos(point.x, point.y)
                asset.set_pos(x, y)

    def lookahead_cb(self, msg: Float32, asset):
        """Callback for lookahead_pnt messages."""
        asset.set_radius(self.window.scale_size(msg.data))

if __name__ == "__main__":
    Visualizer()
