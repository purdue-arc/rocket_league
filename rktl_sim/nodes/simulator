#!/usr/bin/env python3
"""Node to run the simulator with ROS bindings.
License:
  BSD 3-Clause License
  Copyright (c) 2023, Autonomous Robotics Club of Purdue (Purdue ARC)
  All rights reserved.

TODO:
- Scale to support multiple vehicles
- Add offset for walls
"""

# 3rd party modules
from geometry_msgs.msg import PoseWithCovarianceStamped
from nav_msgs.msg import Odometry
import os
import rospy
from std_srvs.srv import Empty, EmptyResponse
from threading import Lock
from enum import Enum

# Local library
import simulator
from rktl_msgs.msg import MatchStatus, ControlCommand, ControlEffort

class SimulatorMode(Enum):
    IDEAL = 1
    REALISTIC = 2

class SimulatorROS(object):
    """ROS wrapper for the simulator."""

    def __init__(self):
        rospy.init_node('simulator')

        mode = rospy.get_param('~mode')
        if mode == 'ideal':
            self.mode = SimulatorMode.IDEAL
        elif mode == 'realistic':
            self.mode = SimulatorMode.REALISTIC
        else:
            rospy.signal_shutdown('unknown sim mode set "{}"'.format(mode))

        render_enabled = rospy.get_param('~render', False)
        rate = rospy.Rate(rospy.get_param('~rate', 30))
        self.frame_id = rospy.get_param('~frame_id', 'map')
        self.timeout = rospy.get_param('~timeout', 10)

        # Setting up field
        fw = rospy.get_param('/field/width')
        fl = rospy.get_param('/field/length')
        wt = rospy.get_param('/field/wall_thickness')
        gw = rospy.get_param('/field/goal/width')
        spawn_height = rospy.get_param('~spawn_height', 0.06)

        # Setting up field
        field_setup = {}
        field_setup["goalA"] = [(fl/2.) + (wt/2.), 0, spawn_height]
        field_setup["goalB"] = [(-fl/2.) - (wt/2.), 0, spawn_height]
        field_setup["rsidewall"] = [0, (fw/2) + (wt/2.), spawn_height]
        field_setup["lsidewall"] = [0, (-fw/2) - (wt/2.), spawn_height]

        bww = (fw-gw)/2
        offset = (gw+bww)/2
        field_setup["flbackwall"] = [(fl/2) + (wt/2.), -offset, spawn_height]
        field_setup["frbackwall"] = [(fl/2) + (wt/2.), offset, spawn_height]
        field_setup["blbackwall"] = [(-fl/2) - (wt/2.), -offset, spawn_height]
        field_setup["brbackwall"] = [(-fl/2) - (wt/2.), offset, spawn_height]

        # Setup bounds for spawning car and ball
        spawn_bounds = [[-(fl/2) + (2 * wt), (fl/2) - (2 * wt)],
                        [-(fw/2) + (2 * wt), (fw/2) - (2 * wt)],
                        [spawn_height, spawn_height]]

        urdf_paths = rospy.get_param('~urdf')
        for path in urdf_paths.values():
            self.check_urdf(path)

        # Creating physics simulator
        self.sim = simulator.Sim(urdf_paths, field_setup, spawn_bounds, render_enabled)

        # Creating the ball
        ball_init_pose = rospy.get_param('~ball/init_pose', None)
        ball_init_speed = rospy.get_param('~ball/init_speed', None)
        ball_noise = rospy.get_param('~ball/sensor_noise', None)
        if self.mode == SimulatorMode.IDEAL:
            ball_noise = None

        self.sim.create_ball('ball', init_pose=ball_init_pose,
            init_speed=ball_init_speed, noise=ball_noise)
        
        if self.mode == SimulatorMode.REALISTIC:
            self.ball_pose_pub = rospy.Publisher('/ball/pose_sync_early',
                PoseWithCovarianceStamped, queue_size=1)
            self.ball_odom_pub = rospy.Publisher('/ball/odom_truth', Odometry, queue_size=1)
        elif self.mode == SimulatorMode.IDEAL:
            self.ball_odom_pub = rospy.Publisher('/ball/odom', Odometry, queue_size=1)

        # Creating a single car
        car_properties = {}
        car_properties['length'] = rospy.get_param('/cars/length')
        car_properties['max_speed'] = rospy.get_param('/cars/throttle/max_speed')
        car_properties['throttle_tau'] = rospy.get_param('/cars/throttle/tau')
        car_properties['steering_throw'] = rospy.get_param('/cars/steering/max_throw')
        car_properties['steering_rate'] = rospy.get_param('/cars/steering/rate')
        car_properties['simulate_effort'] = self.mode == SimulatorMode.REALISTIC
        
        noise = rospy.get_param('~car/sensor_noise', None)
        if self.mode == SimulatorMode.IDEAL:
            noise = None

        self.sim.create_car('car', 
            init_pose=rospy.get_param('~car/init_pose', None),
            noise=noise,
            props=car_properties)

        if self.mode == SimulatorMode.REALISTIC:
            self.car_pose_pub = rospy.Publisher('/cars/car0/pose_sync_early',
                PoseWithCovarianceStamped, queue_size=1)
            rospy.Subscriber('/cars/car0/effort', ControlEffort, self.effort_cb)
            self.car_odom_pub = rospy.Publisher('/cars/car0/odom_truth', Odometry, queue_size=1)
        elif self.mode == SimulatorMode.IDEAL:
            self.car_odom_pub = rospy.Publisher('/cars/car0/odom', Odometry, queue_size=1)
            rospy.Subscriber('/cars/car0/command', ControlCommand, self.cmd_cb)

        # Node data
        self.cmd_lock = Lock()
        self.reset_lock = Lock()
        self.car_cmd = (0.0, 0.0)
        self.last_time = None

        # Publishers
        self.status_pub = rospy.Publisher(
            'match_status', MatchStatus, queue_size=1)

        # Services
        rospy.Service('sim_reset', Empty, self.reset_cb)

        while not rospy.is_shutdown():
            self.loop_once()
            try:
                rate.sleep()
            except rospy.ROSInterruptException:
                pass

    def check_urdf(self, param):
        """Validates that URDF exists, then returns path."""
        if param is None:
            rospy.signal_shutdown('no urdf path set for "{}"'.format(param))

        if not os.path.isfile(param):
            rospy.signal_shutdown(
                'no urdf file exists at path {}'.format(param))

    def effort_cb(self, effort_msg):
        self.cmd_lock.acquire()
        self.car_cmd = (effort_msg.throttle, effort_msg.steering)
        self.cmd_lock.release()

    def cmd_cb(self, cmd_msg):
        self.cmd_lock.acquire()
        self.car_cmd = (cmd_msg.velocity, cmd_msg.curvature)
        self.cmd_lock.release()

    def reset_cb(self, _):
        """Resets simulator."""
        self.reset_lock.acquire()
        self.sim.reset()
        self.car_cmd = (0.0, 0.0)
        self.last_time = None
        self.reset_lock.release()
        return EmptyResponse()

    def loop_once(self):
        """Main loop."""
        self.reset_lock.acquire()
        now = rospy.Time.now()
        if self.last_time is not None and self.last_time != now:
            # Iterate sim one step
            delta_t = (now - self.last_time).to_sec()

            status = MatchStatus()
            if self.sim.scored:
                if self.sim.winner == "A":
                    status.status = MatchStatus.VICTORY_TEAM_A
                elif self.sim.winner == "B":
                    status.status = MatchStatus.VICTORY_TEAM_B
            else:
                status.status = MatchStatus.ONGOING
            self.status_pub.publish(status)

            self.sim.step(self.car_cmd, delta_t)

            if self.mode == SimulatorMode.REALISTIC:
                # Publish ball sync pose
                ball_pos, ball_quat = self.sim.getBallPose(add_noise=True)
                if ball_pos is not None:
                    ball_msg = PoseWithCovarianceStamped()
                    ball_msg.header.stamp = now
                    ball_msg.header.frame_id = self.frame_id
                    ball_msg.pose.pose.position.x = ball_pos[0]
                    ball_msg.pose.pose.position.y = ball_pos[1]
                    ball_msg.pose.pose.position.z = ball_pos[2]
                    ball_msg.pose.pose.orientation.x = ball_quat[0]
                    ball_msg.pose.pose.orientation.y = ball_quat[1]
                    ball_msg.pose.pose.orientation.z = ball_quat[2]
                    ball_msg.pose.pose.orientation.w = ball_quat[3]
                    self.ball_pose_pub.publish(ball_msg)

                # Publish car sync pose
                car_pos, car_quat = self.sim.getCarPose(add_noise=True)
                if car_pos is not None:
                    car_msg = PoseWithCovarianceStamped()
                    car_msg.header.stamp = now
                    car_msg.header.frame_id = self.frame_id
                    car_msg.pose.pose.position.x = car_pos[0]
                    car_msg.pose.pose.position.y = car_pos[1]
                    car_msg.pose.pose.position.z = car_pos[2]
                    car_msg.pose.pose.orientation.x = car_quat[0]
                    car_msg.pose.pose.orientation.y = car_quat[1]
                    car_msg.pose.pose.orientation.z = car_quat[2]
                    car_msg.pose.pose.orientation.w = car_quat[3]
                    self.car_pose_pub.publish(car_msg)

            # Publish ball odometry
            ball_msg = Odometry()
            ball_msg.header.stamp = now
            ball_msg.header.frame_id = self.frame_id
            ball_pos, ball_quat = self.sim.getBallPose()
            ball_msg.pose.pose.position.x = ball_pos[0]
            ball_msg.pose.pose.position.y = ball_pos[1]
            ball_msg.pose.pose.position.z = ball_pos[2]
            ball_msg.pose.pose.orientation.x = ball_quat[0]
            ball_msg.pose.pose.orientation.y = ball_quat[1]
            ball_msg.pose.pose.orientation.z = ball_quat[2]
            ball_msg.pose.pose.orientation.w = ball_quat[3]
            ball_linear, ball_angular = self.sim.getBallVelocity()
            ball_msg.twist.twist.linear.x = ball_linear[0]
            ball_msg.twist.twist.linear.y = ball_linear[1]
            ball_msg.twist.twist.linear.z = ball_linear[2]
            ball_msg.twist.twist.angular.x = ball_angular[0]
            ball_msg.twist.twist.angular.y = ball_angular[1]
            ball_msg.twist.twist.angular.z = ball_angular[2]
            self.ball_odom_pub.publish(ball_msg)

            # Publish bot odometry
            car_msg = Odometry()
            car_msg.header.stamp = now
            car_msg.header.frame_id = self.frame_id
            car_pos, car_quat = self.sim.getCarPose()
            car_msg.pose.pose.position.x = car_pos[0]
            car_msg.pose.pose.position.y = car_pos[1]
            car_msg.pose.pose.position.z = car_pos[2]
            car_msg.pose.pose.orientation.x = car_quat[0]
            car_msg.pose.pose.orientation.y = car_quat[1]
            car_msg.pose.pose.orientation.z = car_quat[2]
            car_msg.pose.pose.orientation.w = car_quat[3]
            car_linear, car_angular = self.sim.getCarVelocity()
            car_msg.twist.twist.linear.x = car_linear[0]
            car_msg.twist.twist.linear.y = car_linear[1]
            car_msg.twist.twist.linear.z = car_linear[2]
            car_msg.twist.twist.angular.x = car_angular[0]
            car_msg.twist.twist.angular.y = car_angular[1]
            car_msg.twist.twist.angular.z = car_angular[2]
            self.car_odom_pub.publish(car_msg)

        self.last_time = now
        self.reset_lock.release()

if __name__ == "__main__":
    SimulatorROS()
