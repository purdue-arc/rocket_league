#!/usr/bin/env python3
"""Tests control of the car matches expected model.
License:
    BSD 3-Clause License
    Copyright (c) 2020, Autonomous Robotics Club of Purdue (Purdue ARC)
    All rights reserved.
"""

import unittest
import rospy
import simulator

class TestCar(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        rospy.init_node('test_car_node')

        urdf_paths = {}
        urdf_paths["car"] = rospy.get_param('~urdf/car')
        urdf_paths["plane"] = rospy.get_param('~urdf/plane')

        # Creating physics simulator
        cls.sim = simulator.Sim(
            urdf_paths, {}, {}, False)

        # Creating the car
        car_properties = {
            'length' : 1.0,
            'max_speed' : 1.0,      # relevant
            'throttle_tau' : 0.25,  # relevant
            'steering_throw' : 1.0,
            'steering_rate' : 1.0,
            'simulate_effort': True,
        }

        car_init_pose = {"pos": (0.0, 0.0, 0.06), "orient":(0.0, 0.0, 0.0)}
        cls.sim.create_car('car', 
            init_pose=car_init_pose,
            noise=None,
            props=car_properties)

    def test_throttle_resp(self):
        self.run_throttle_resp(1.0, 0.25, 0.632, 0.001)
        rospy.sleep(rospy.Duration(0.5))
        self.run_throttle_resp(0.5, 0.5, 0.432, 0.001)

    def run_throttle_resp(self, i_throttle, i_wait, e_vel, e_err):
        self.sim.reset()
        rospy.sleep(rospy.Duration(0.2))

        freq = 12.0 # must be evenly divisible by i_wait
        for _ in range(round(i_wait * freq)):
            self.sim.step((i_throttle, 0.0), 1.0/freq)

        vel = self.sim.getCarVelocity()[0][0]
        self.assertLess(vel, e_vel + e_err, 'car moving too fast: ' +
            f'expected velocity {e_vel}, actual velocity {vel}')
    
        self.assertGreater(vel, e_vel - e_err, 'car moving too slow: ' +
            f'expected velocity {e_vel}, actual velocity {vel}')

if __name__ == '__main__':
    import rostest
    rostest.run('rktl_sim', 'test_car_node', TestCar)