#!/usr/bin/env python3
"""Contains the PatrolPlanner node, a very simple planner.
License:
  BSD 3-Clause License
  Copyright (c) 2023, Autonomous Robotics Club of Purdue (Purdue ARC)
  All rights reserved.
"""

import rclpy
from external.transformations import euler_from_quaternion
from nav_msgs.msg import Odometry
from rktl_msgs.msg import ControlCommand

import math, time
from external.angles import shortest_angular_distance as sad

class PatrolPlanner(object):
    """A very simple strategy for rktl. Patrol around the field in a circle and
    make a beeline at the ball if it seems like it would result in a goal."""

    def __init__(self):
        rclpy.init()
        global node
        node = rclpy.create_node('path_follower')

        # physical constants (global)
        self.FIELD_WIDTH = node.declare_parameter('/field/width')
        self.FIELD_HEIGHT = node.declare_parameter('/field/length')
        self.MAX_CURVATURE = math.tan(node.declare_parameter('/cars/steering/max_throw')) / node.declare_parameter('/cars/length')

        # constants
        # general stability parameters
        self.SPEED = node.declare_parameter('~speed', 1.0)
        self.CURVATURE_P_GAIN = node.declare_parameter('~curvature_gain/kp', 1.0)
        self.CURVATURE_D_GAIN = node.declare_parameter('~curvature_gain/kd', 0.0)
        self.CURVATURE_GAIN_FALLOFF_SQ = pow(node.declare_parameter('~curvature_gain/falloff', 1e-9), 2)
        self.PATROL_DIST = node.declare_parameter('~patrol_wall_dist', 0.5)

        # wall avoidance parameters
        self.WALL_REVERSE_TIME = node.declare_parameter('~wall_avoidance/reverse_time', 0.25)
        self.WALL_DIST_MARGIN = node.declare_parameter('~wall_avoidance/distance_margin', 0.5)
        self.WALL_HEADING_MARGIN = node.declare_parameter('~wall_avoidance/heading_margin', math.pi/4)

        # offense & defense parameters
        self.ATTEMPT_TIMEOUT = node.declare_parameter('~attempt_timeout', 5.0)
        self.DEFENSIVE_LINE = node.declare_parameter('~defensive_line', 0.0)
        self.REVERSE_LINE = node.declare_parameter('~reverse_line', 0.0)

        # offensive related parameters
        self.SCORING_MARGIN = node.declare_parameter('~scoring/heading_margin', math.pi/8.0)
        self.LOOKAHEAD_DIST = node.declare_parameter('~scoring/car_lookahead_dist', 1.0)
        self.LOOKAHEAD_TIME = node.declare_parameter('~scoring/ball_lookahead_time', 0.0)
        self.GOAL_DEPTH_TARGET = node.declare_parameter('~scoring/goal_depth_target', 0.0)

        # defense related parameters
        self.DEFENSE_TIME_GAIN = node.declare_parameter('~defense/reverse_time_gain', 0.5)

        # variables
        self.ball_position = None
        self.ball_velocity = None
        self.attempt_start_time = None
        self.prev_error = 0.0

        # Publishers
        self.cmd_pub = node.create_publisher(ControlCommand, 'command', 1)

        # Subscribers
        node.create_subscription(Odometry, 'odom', self.car_odom_cb)
        node.create_subscription(Odometry, '/ball/odom', self.ball_odom_cb)

        rclpy.spin()

    def ball_odom_cb(self, odom_msg):
        """Callback for ball odometry."""
        self.ball_position = (
            odom_msg.pose.pose.position.x,
            odom_msg.pose.pose.position.y
        )
        self.ball_velocity = (
            odom_msg.twist.twist.linear.x,
            odom_msg.twist.twist.linear.y,
        )

    def car_odom_cb(self, odom_msg):
        """Callback for car odometry."""

        # extract car's position & heading
        x = odom_msg.pose.pose.position.x
        y = odom_msg.pose.pose.position.y
        __, __, yaw = euler_from_quaternion([
            odom_msg.pose.pose.orientation.x,
            odom_msg.pose.pose.orientation.y,
            odom_msg.pose.pose.orientation.z,
            odom_msg.pose.pose.orientation.w
        ])

        # Prep command message for publish
        cmd_msg = ControlCommand()

        # check that ball position is known
        if self.ball_position is None or self.ball_velocity is None:
            self.cmd_pub.publish(cmd_msg)
            node.get_logger().warn("ball position unknown")
            return

        # calculate cardinal distances / errors
        north_wall_dist = abs(x - self.FIELD_HEIGHT/2.0)
        south_wall_dist = abs(x + self.FIELD_HEIGHT/2.0)
        east_wall_dist = abs(y + self.FIELD_WIDTH/2.0)
        west_wall_dist = abs(y - self.FIELD_WIDTH/2.0)

        north_heading_error = sad(yaw, 0.0)
        south_heading_error = sad(yaw, math.pi)
        east_heading_error = sad(yaw, -math.pi/2.0)
        west_heading_error = sad(yaw, +math.pi/2.0)

        # extract ball position and velocity, adding look-ahead time
        bx, by = self.ball_position
        vbx, vby = self.ball_velocity
        bx += vbx * self.LOOKAHEAD_TIME
        by += vby * self.LOOKAHEAD_TIME

        # known goal position
        gx = self.FIELD_HEIGHT/2.0 + self.GOAL_DEPTH_TARGET
        gy = 0.0

        # add a look-ahead distance to the car
        # (dependent on fwd or rev direction)
        if by < self.REVERSE_LINE:
            x_la = x + math.cos(yaw) * self.LOOKAHEAD_DIST
            y_la = y + math.sin(yaw) * self.LOOKAHEAD_DIST
        else:
            x_la = x - math.cos(yaw) * self.LOOKAHEAD_DIST
            y_la = y - math.sin(yaw) * self.LOOKAHEAD_DIST

        # calculate scoring / defensive heading errors
        car_ball_heading =  math.atan2(by - y, bx - x)

        car_ball_heading_la =  math.atan2(by - y_la, bx - x_la)
        ball_goal_heading = math.atan2(gy - by, gx - bx)

        # check to see if an existing attempt has timed out
        if self.attempt_start_time is not None and (node.get_clock().now() - self.attempt_start_time).to_sec() > self.ATTEMPT_TIMEOUT:
            self.attempt_start_time = None
            node.get_logger().info("attempt timeout")

        # check if we should be offensive or defensive
        if bx > self.DEFENSIVE_LINE:    # offensive
            # check if we are well aligned to score
            if self.attempt_start_time is not None or abs(sad(ball_goal_heading, car_ball_heading_la)) < self.SCORING_MARGIN:
                # check to see if we should score in forward or reverse
                if by < self.REVERSE_LINE:  # forward
                    cmd_msg.velocity = self.SPEED
                    cmd_msg.curvature = self.control_curvature(sad(yaw, car_ball_heading))
                else:   # reverse
                    cmd_msg.velocity = -self.SPEED
                    cmd_msg.curvature = -self.control_curvature(sad(yaw, car_ball_heading + math.pi))

                # apply falloff
                car_ball_dist_sq = pow(by - y, 2) + pow(bx - x, 2)
                if car_ball_dist_sq / self.CURVATURE_GAIN_FALLOFF_SQ < 1.0:
                    cmd_msg.curvature *= car_ball_dist_sq / self.CURVATURE_GAIN_FALLOFF_SQ

                self.cmd_pub.publish(cmd_msg)

                # mark attempt start
                if self.attempt_start_time is None:
                    self.attempt_start_time = node.get_clock().now()
                    self.prev_error = 0.0
                    node.get_logger().info("beginning scoring attempt")
                return

        else:   # defensive
            if self.attempt_start_time is not None:
                # determine if ball should be hit in fwd or rev
                if by < self.REVERSE_LINE:  # forward
                    cmd_msg.velocity = self.SPEED
                    cmd_msg.curvature = self.control_curvature(sad(yaw, car_ball_heading))
                else:   # reverse
                    cmd_msg.velocity = -self.SPEED
                    cmd_msg.curvature = -self.control_curvature(sad(yaw, car_ball_heading + math.pi))

                # apply falloff
                car_ball_dist_sq = pow(by - y, 2.0) + pow(bx - x, 2)
                if car_ball_dist_sq / self.CURVATURE_GAIN_FALLOFF_SQ < 1.0:
                    cmd_msg.curvature *= car_ball_dist_sq / self.CURVATURE_GAIN_FALLOFF_SQ

                self.cmd_pub.publish(cmd_msg)
                return

            # if not already trying to hit the ball, wait until at bottom part of pattern
            elif (abs(east_heading_error) < self.SCORING_MARGIN and
                    south_wall_dist < self.PATROL_DIST + 0.25 and
                    abs(east_wall_dist - west_wall_dist) < 0.5):
                # run fwd or rev so easier to hit ball
                if by < self.REVERSE_LINE:
                    cmd_msg.velocity = -self.SPEED
                else:
                    cmd_msg.velocity = self.SPEED

                cmd_msg.curvature = 0.0
                self.cmd_pub.publish(cmd_msg)

                # mark attempt start
                self.attempt_start_time = node.get_clock().now()
                self.prev_error = 0.0
                node.get_logger().info("beginning defensive attempt")

                # reverse for longer, if the ball is nearer to the middle
                time.sleep((self.FIELD_WIDTH/2.0 - abs(by)) * self.DEFENSE_TIME_GAIN)
                return

        # If not trying to score, prioritize not running in to walls
        # If running into a wall is detected, reverse for a set time limit

        # check if jammed in a corner, where a turn is required to get back on the proper path
        if (north_wall_dist < self.WALL_DIST_MARGIN and west_wall_dist  < self.WALL_DIST_MARGIN and
            abs(north_heading_error) < self.WALL_HEADING_MARGIN or
            south_wall_dist < self.WALL_DIST_MARGIN and east_wall_dist  < self.WALL_DIST_MARGIN and
            abs(south_heading_error) < self.WALL_HEADING_MARGIN or
            east_wall_dist  < self.WALL_DIST_MARGIN and north_wall_dist < self.WALL_DIST_MARGIN and
            abs(east_heading_error)  < self.WALL_HEADING_MARGIN or
            west_wall_dist  < self.WALL_DIST_MARGIN and south_wall_dist < self.WALL_DIST_MARGIN and
            abs(west_heading_error)  < self.WALL_HEADING_MARGIN):
                cmd_msg.velocity = -self.SPEED
                cmd_msg.curvature = -self.MAX_CURVATURE
                self.cmd_pub.publish(cmd_msg)
                time.sleep(self.WALL_REVERSE_TIME)  # stay in reverse for a bit
                return

        # check if jammed in a corner, anywhere in a 90 degree arc facing the corner
        if (north_wall_dist < self.WALL_DIST_MARGIN and west_wall_dist  < self.WALL_DIST_MARGIN and
            north_heading_error < 0.0 and west_heading_error > 0.0 or
            south_wall_dist < self.WALL_DIST_MARGIN and east_wall_dist  < self.WALL_DIST_MARGIN and
            south_heading_error < 0.0 and east_heading_error > 0.0 or
            east_wall_dist  < self.WALL_DIST_MARGIN and north_wall_dist < self.WALL_DIST_MARGIN and
            east_heading_error < 0.0 and north_heading_error > 0.0 or
            west_wall_dist  < self.WALL_DIST_MARGIN and south_wall_dist < self.WALL_DIST_MARGIN and
            west_heading_error < 0.0 and south_heading_error > 0.0):
                cmd_msg.velocity = -self.SPEED
                cmd_msg.curvature = 0.0
                self.cmd_pub.publish(cmd_msg)
                time.sleep(self.WALL_REVERSE_TIME)  # stay in reverse for a bit
                return

        # check if near a wall and facing it
        if (north_wall_dist < self.WALL_DIST_MARGIN and abs(north_heading_error) < self.WALL_HEADING_MARGIN or
            south_wall_dist < self.WALL_DIST_MARGIN and abs(south_heading_error) < self.WALL_HEADING_MARGIN or
            east_wall_dist  < self.WALL_DIST_MARGIN and abs(east_heading_error)  < self.WALL_HEADING_MARGIN or
            west_wall_dist  < self.WALL_DIST_MARGIN and abs(west_heading_error)  < self.WALL_HEADING_MARGIN):
                cmd_msg.velocity = -self.SPEED
                cmd_msg.curvature = 0.0
                self.cmd_pub.publish(cmd_msg)
                time.sleep(self.WALL_REVERSE_TIME)  # stay in reverse for a bit
                return

        # Follow simple rules to make it follow a "patrol"
        # Check to see if it is at the top or bottom, where it should be curving
        if (north_wall_dist < 1.0/self.MAX_CURVATURE + self.PATROL_DIST or
            south_wall_dist < 1.0/self.MAX_CURVATURE + self.PATROL_DIST):
                # check to see if should wait to turn
                if (x > 0.0 and west_wall_dist > 1.0/self.MAX_CURVATURE + self.PATROL_DIST):
                    cmd_msg.curvature = self.control_curvature(west_heading_error)
                elif (x < 0.0 and east_wall_dist > 1.0/self.MAX_CURVATURE + self.PATROL_DIST):
                    cmd_msg.curvature = self.control_curvature(east_heading_error)
                else:
                    cmd_msg.curvature = self.MAX_CURVATURE
        else:   # send it straight north or south otherwise
            if (y > 0.0):
                # west wall (southern heading desired)
                cmd_msg.curvature = self.control_curvature(south_heading_error)
            else:
                # east wall (northern heading desired)
                cmd_msg.curvature = self.control_curvature(north_heading_error)

        cmd_msg.velocity = self.SPEED
        self.cmd_pub.publish(cmd_msg)

    def control_curvature(self, error):
        """PD controller for curvature."""
        delta_error = error - self.prev_error
        curvature = (
            self.CURVATURE_P_GAIN * error +
            self.CURVATURE_D_GAIN * delta_error)
        self.prev_error = error
        return curvature

if __name__ == "__main__":
    PatrolPlanner()
